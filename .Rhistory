require(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
require(tseries) #diverses fonctions sur les series temporelles
data <- read.csv(datafile,sep=";") #importe un fichier .csv dans un objet de classe data.frame
datafile <- "Donnees1.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep=";") #importe un fichier .csv dans un objet de classe data.frame
View(data)
xm.source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
#### Q2 ####
plot(xm) #
plot(xm, xaxt="n") #
axis(side=1,at=seq(0,196,12)) #
acf(xm) #
desaison <- xm-lag(xm,-12) #
desaison
par(mfrow=c(1,2)) #
plot(desaison)
acf(desaison)
#### Q3 ####
acf(desaison) #
pacf(desaison) #
#
#### Q4 ####
dev.off() #reinitialise les parametres des representations graphiques
plot(desaison)
pp.test(desaison) #
#### Q5 ####
acf(desaison); pacf(desaison)
axis(side=1,at=seq(0,25))
#
#
y <- desaison - mean(desaison) #
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
#
arima(y,c(3,0,2)) #
pacf(desaison)
#
arima(y,c(3,0,2)) #
Box.test(arima302$residuals, lag=6, type="Ljung-Box", fitdf=5) # Residual autocorrelation test
arima302 <- arima(y,c(3,0,2)) #
Box.test(arima302$residuals, lag=6, type="Ljung-Box", fitdf=5) # Residual autocorrelation test
#
#
#
#
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(arima302$residuals, 24, 5) #tests de LB pour les ordres 1 a 24
round(Qtests(arima302$residuals,24,fitdf=5),3)
#### Q6 ####
#
signif <- function(estim){ #fonction de test des significations individuelles des coefficients
coef <- estim$coef
se <- sqrt(diag(estim$var.coef))
t <- coef/se
pval <- (1-pnorm(abs(t)))*2
return(rbind(coef,se,pval))
}
signif(arima302) #
##
arimafit <- function(estim){
adjust <- round(signif(estim),3)
pvals <- Qtests(estim$residuals,24,length(estim$coef)-1)
pvals <- matrix(apply(matrix(1:24,nrow=6),2,function(c) round(pvals[c,],3)),nrow=6)
colnames(pvals) <- rep(c("lag", "pval"),4)
cat("tests de nullite des coefficients :\n")
print(adjust)
cat("\n tests d'absence d'autocorrelation des residus : \n")
print(pvals)
}
estim <- arima(y,c(1,0,0)); arimafit(estim)
estim <- arima(y,c(2,0,0)); arimafit(estim)
estim <- arima(y,c(3,0,0)); arimafit(estim)
#
ar3 <- estim
estim <- arima(y,c(0,0,1)); arimafit(estim)
estim <- arima(y,c(0,0,2)); arimafit(estim)
#
ma2 <- estim
estim <- arima(y,c(1,0,1)); arimafit(estim)
estim <- arima(y,c(1,0,1)); arimafit(estim)
estim <- arima(y,c(1,0,2)); arimafit(estim)
estim <- arima(y,c(2,0,1)); arimafit(estim)
estim <- arima(y,c(1,0,1)); arimafit(estim)
estim <- arima(y,c(1,0,2)); arimafit(estim)
estim <- arima(y,c(2,0,1)); arimafit(estim)
#
ar2ma1 <- estim
estim <- arima(y,c(2,0,2)); arimafit(estim)
#
models <- c("ar3","ma2","ar2ma1"); names(models) <- models
apply(as.matrix(models),1, function(m) c("AIC"=AIC(get(m)), "BIC"=BIC(get(m))))
##
models <-  c("ar3","ma2","ar2ma1")
preds <- zoo(matrix(NA,ncol=3,nrow=4),order.by=tail(index(xm.source),4))
colnames(preds) <- models
desaisonp <- preds #
xmp <- preds #
##
for (m in models){
pred1 <- mean(desaison) + zoo(predict(get(m),4)$pred, order.by=tail(index(xm.source),4))
pred2 <- as.numeric(tail(xm,12))[1:4] + pred1
desaisonp[,m] <- pred1
xmp[,m] <- pred2
}
obs <- tail(xm.source,4) #
cbind(obs,xmp) #
apply(xmp,2, function(x) sqrt(sum((x-obs)^2)/4)/sd(xm.source)) #
#### Q8 ####
datafile <- "Donnees2.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep=";") #importe un fichier .csv dans un objet de classe data.frame
xm.source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
dev.off() #reinitialise les parametre de graphique
plot(xm)
trend <- 1:length(xm)
lt <- lm(xm ~ trend) #
summary(lt) #
r <- lt$residuals #
par(mfrow=c(1,2))
plot(r)
acf(r)
require(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
require(tseries) #diverses fonctions sur les series temporelles
datafile <- "Donnees1.csv" #definit le fichier de donnees
T <- length(xm.source)
xm.source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
data <- read.csv(datafile,sep=";") #importe un fichier .csv dans un objet de classe data.frame
plot(xm, xaxt="n") #
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
#### Q2 ####
plot(xm) #affiche la serie temporelle
axis(side=1,at=seq(0,196,12)) #
acf(xm) #
desaison <- xm-lag(xm,-12) #
par(mfrow=c(1,2)) #
plot(desaison)
acf(desaison)
#### Q3 ####
acf(desaison) #
pacf(desaison) #
#
#### Q4 ####
dev.off() #reinitialise les parametres des representations graphiques
plot(desaison)
pp.test(desaison) #
#### Q5 ####
acf(desaison); pacf(desaison)
axis(side=1,at=seq(0,25))
# pmax = 3
# qmax = 2
y <- desaison - mean(desaison) #
par(mfrow=c(1,2))
acf(y,24);pacf(y,24)
#
arima(y,c(3,0,2)) #
arima302 <- arima(y,c(3,0,2)) # sauvegarde du modele
Box.test(arima302$residuals, lag=6, type="Ljung-Box", fitdf=5) # Residual autocorrelation test
#
#
#
#
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
Qtests(arima302$residuals, 24, 5) #tests de LB pour les ordres 1 a 24
round(Qtests(arima302$residuals,24,fitdf=5),3)
#### Q6 ####
#
signif <- function(estim){ #fonction de test des significations individuelles des coefficients
coef <- estim$coef
se <- sqrt(diag(estim$var.coef))
t <- coef/se
pval <- (1-pnorm(abs(t)))*2
return(rbind(coef,se,pval))
}
signif(arima302) #
##
arimafit <- function(estim){
adjust <- round(signif(estim),3)
pvals <- Qtests(estim$residuals,24,length(estim$coef)-1)
pvals <- matrix(apply(matrix(1:24,nrow=6),2,function(c) round(pvals[c,],3)),nrow=6)
colnames(pvals) <- rep(c("lag", "pval"),4)
cat("tests de nullite des coefficients :\n")
print(adjust)
cat("\n tests d'absence d'autocorrelation des residus : \n")
print(pvals)
}
estim <- arima(y,c(1,0,0)); arimafit(estim)
estim <- arima(y,c(2,0,0)); arimafit(estim)
estim <- arima(y,c(3,0,0)); arimafit(estim)
#
ar3 <- estim
estim <- arima(y,c(0,0,1)); arimafit(estim)
estim <- arima(y,c(0,0,2)); arimafit(estim)
#
ma2 <- estim
estim <- arima(y,c(1,0,1)); arimafit(estim)
estim <- arima(y,c(1,0,2)); arimafit(estim)
estim <- arima(y,c(2,0,1)); arimafit(estim)
#
ar2ma1 <- estim
estim <- arima(y,c(2,0,2)); arimafit(estim)
#
models <- c("ar3","ma2","ar2ma1"); names(models) <- models
apply(as.matrix(models),1, function(m) c("AIC"=AIC(get(m)), "BIC"=BIC(get(m))))
##
models <-  c("ar3","ma2","ar2ma1")
preds <- zoo(matrix(NA,ncol=3,nrow=4),order.by=tail(index(xm.source),4))
colnames(preds) <- models
desaisonp <- preds #
xmp <- preds #
##
for (m in models){
pred1 <- mean(desaison) + zoo(predict(get(m),4)$pred, order.by=tail(index(xm.source),4))
pred2 <- as.numeric(tail(xm,12))[1:4] + pred1
desaisonp[,m] <- pred1
xmp[,m] <- pred2
}
obs <- tail(xm.source,4) #
cbind(obs,xmp) #
apply(xmp,2, function(x) sqrt(sum((x-obs)^2)/4)/sd(xm.source)) #
#### Q8 ####
datafile <- "Donnees2.csv" #definit le fichier de donnees
data <- read.csv(datafile,sep=";") #importe un fichier .csv dans un objet de classe data.frame
xm.source <- zoo(data[[1]]) #convertit le premier element de data en serie temporelle de type "zoo"
T <- length(xm.source)
xm <- xm.source[1:(T-4)] #supprime les 4 dernieres valeurs
dev.off() #reinitialise les parametre de graphique
plot(xm)
trend <- 1:length(xm)
lt <- lm(xm ~ trend) #
summary(lt) #
r <- lt$residuals #
par(mfrow=c(1,2))
plot(r)
acf(r)
pp.test(xm)
acf(r,24);pacf(r,24)
###
###
pmax=4; qmax=21
## fonction pour estimer un arima et en verifier l'ajustement et la validite
modelchoice <- function(p,q,data=r, k=24){
estim <- try(arima(data, c(p,0,q),optim.control=list(maxit=20000)))
if (class(estim)=="try-error") return(c("p"=p,"q"=q,"arsignif"=NA,"masignif"=NA,"resnocorr"=NA, "ok"=NA))
arsignif <- if (p==0) NA else signif(estim)[3,p]<=0.05
masignif <- if (q==0) NA else signif(estim)[3,p+q]<=0.05
resnocorr <- sum(Qtests(estim$residuals,24,length(estim$coef)-1)[,2]<=0.05,na.rm=T)==0
checks <- c(arsignif,masignif,resnocorr)
ok <- as.numeric(sum(checks,na.rm=T)==(3-sum(is.na(checks))))
return(c("p"=p,"q"=q,"arsignif"=arsignif,"masignif"=masignif,"resnocorr"=resnocorr,"ok"=ok))
}
## fonction pour estimer et verifier tous les arima(p,q) avec p<=pmax et q<=max
armamodelchoice <- function(pmax,qmax){
pqs <- expand.grid(0:pmax,0:qmax)
t(apply(matrix(1:dim(pqs)[1]),1,function(row) {
p <- pqs[row,1]; q <- pqs[row,2]
cat(paste0("Computing ARMA(",p,",",q,") \n"))
modelchoice(p,q)
}))
}
armamodels <- armamodelchoice(pmax,qmax) #estime tous les arima (patienter...)
selec <- armamodels[armamodels[,"ok"]==1&!is.na(armamodels[,"ok"]),] #modeles bien ajustes et valides
selec
pqs <- apply(selec,1,function(row) list("p"=as.numeric(row[1]),"q"=as.numeric(row[2]))) #cree une liste des ordres p et q des modeles candidats
names(pqs) <- paste0("arma(",selec[,1],",",selec[,2],")") #renomme les elements de la liste
models <- lapply(pqs, function(pq) arima(r,c(pq[["p"]],0,pq[["q"]]))) #cree une liste des modeles candidats estimes
vapply(models, FUN.VALUE=numeric(2), function(m) c("AIC"=AIC(m),"BIC"=BIC(m))) #calcule les AIC et BIC des modeles candidats
rps <- lapply(models, function(m) as.zoo(predict(m,4)$pred)) #previsions de r
xmps <- lapply(rps, function(rp) rp+cbind(1,c((T-3):T))%*%lt$coefficients) #previsions de xm
rmse <- vapply(xmps, FUN.VALUE=numeric(1), function(xmp) sqrt(sum((as.zoo(xmp)-tail(xm.source,4))^2))) #calcule les rmse out-of-sample
rmse
# Q1 ####
datafile <- "data_tp5.csv"
data <- read.csv(datafile, sep=";")
# Q1 ####
datafile <- "data_tp5.csv"
data <- read.csv(datafile, sep=";")
View(data)
# Q2 ####
require(zoo)
dates_char <- as.character(data$dates)
dates_char[1] #
tail(dates_char,1) #
dates <- as.yearmon(seq(from=1986+2/12, to=2007+3/12, by=1/12)) #
dates
spread <- zoo(data$spread, order.by=dates)
dspread <- diff(spread,1)
plot(cbind(spread,dspread))
# Q3 ####
summary(lm(spread ~ dates))
#
install.packages("fUnitRoots")#tests de racine unitaire plus modulables
library(fUnitRoots)
# require(fUnitRoots)
adf <- adfTest(spread, lag=0, type="ct") #
adf
# Q3 ####
# Before making unit root test we test that there is not a linear trend
summary(lm(spread ~ dates))
# require(fUnitRoots)
adf <- adfTest(spread, lag=0, type="ct") #
adf
# require(fUnitRoots)
adf <- adfTest(spread, lag=1, type="ct") #
adf
# require(fUnitRoots)
adf <- adfTest(spread, lag=2, type="ct") #
adf
# require(fUnitRoots)
adf <- adfTest(spread, lag=0, type="ct") #
adf
#
Qtests <- function(series, k, fitdf=0) {
pvals <- apply(matrix(1:k), 1, FUN=function(l) {
pval <- if (l<=fitdf) NA else Box.test(series, lag=l, type="Ljung-Box", fitdf=fitdf)$p.value
return(c("lag"=l,"pval"=pval))
})
return(t(pvals))
}
?adfTest
str(adf)
Qtests(adf@test$lm$residuals, 24, fitdf = length(adf@test$lm$coefficients))
# we reject the absence of autocorrelation in the residuals until order 12
#
series <- spread; kmax <- 24; adftype="ct"
adfTest_valid <- function(series, kmax, adftype){
k <- 0
noautocorr <- 0
while (noautocorr==0){
cat(paste0("ADF with ",k," lags: residuals OK? "))
adf <- adfTest(series, lags=k, type=adftype)
pvals <- Qtests(adf@test$lm$residuals, 24, fitdf = length(adf@test$lm$coefficients))[,2]
if (sum(pvals<0.05,na.rm=T)==0) {
noautocorr <- 1; cat("OK \n")
} else cat("nope \n")
k <- k+1
}
return(adf)
}
adf <- adfTest_valid(spread,24,adftype="ct")
#
Qtests(adf@test$lm$residuals, 24, fitdf = length(adf@test$lm$coefficients))
#
adf
#
summary(lm(dspread ~ dates[-1]))
#
adf <- adfTest_valid(dspread,24,"nc")
#
Qtests(adf@test$lm$residuals, 24, fitdf = length(adf@test$lm$coefficients))
adf
# Q4 ####
par(mfrow=c(1,2))
pacf(dspread,24);acf(dspread,24) #on regarde jusqu'? deux ans de retard
#
#
pmax=3;qmax=3
# Q5 ####
pqs <- expand.grid(0:pmax,0:qmax) #combinaisons possibles de p<=p* et q<=q*
#
adf
#
summary(lm(dspread ~ dates[-1]))
#
adf <- adfTest_valid(dspread,24,"nc")
#
Qtests(adf@test$lm$residuals, 24, fitdf = length(adf@test$lm$coefficients))
adf
# Q4 ####
par(mfrow=c(1,2))
pacf(dspread,24);acf(dspread,24) #on regarde jusqu'? deux ans de retard
#
#
pmax=3;qmax=3
# Q5 ####
pqs <- expand.grid(0:pmax,0:qmax) #combinaisons possibles de p<=p* et q<=q*
mat <- matrix(NA, nrow=pmax+1, ncol=pmax+1)
rownames(mat) <- paste0("p=",0:pmax) #renomme les lignes
colnames(mat) <- paste0("q=",0:pmax) #renomme les colonnes
AICs <- mat #matrice ou assigner les AIC
BICs <- mat #matrice ou assigner les BIC
for (row in 1:dim(pqs)[1]){
p <- pqs[row,1]
q <- pqs[row,2]
estim <- try(arima(dspread,c(p,0,q), include.mean=F)) #tente d'estimer l'ARIMA
AICs[p+1,q+1] <- if (class(estim)=="try-error") NA else estim$aic
BICs[p+1,q+1] <- if (class(estim)=="try-error") NA else BIC(estim)
}
AICs
BICs
AICs==min(AICs)
#
BICs==min(BICs)
#
arima310 <- arima(spread,c(3,1,0),include.mean=F)
arima011 <- arima(spread,c(0,1,1),include.mean=F)
# Q6 ####
arima310
#
arima011
#
# Q7 ####
Qtests(arima310$residuals, 24, fitdf=3)
#
Qtests(arima011$residuals, 24, fitdf=1)
# Q9 ####
adj_r2 <- function(model){
ss_res <- sum(model$residuals^2)
ss_tot <- sum(dspread[-c(1:max(p,q))]^2)
p <- model$arma[1]
q <- model$arma[2]
n <- model$nobs-max(p,q)
adj_r2 <- 1-(ss_res/(n-p-q-1))/(ss_tot/(n-1))
return(adj_r2)
}
adj_r2(arima310)
adj_r2(arima011)
dev.off()
plot(arima310$residuals)
axis(side=1,2001+11/12)
# Q10 ####
#.
#
breakpoint <- c(1:length(dates))[dates==1995]
ap1995 <- c(rep(0,breakpoint-1),rep(1,length(dates)-breakpoint+1))
arima(spread,c(3,1,0),xreg=ap1995,include.mean=F)
plot(dspread)
# Q6 ####
arima310
#
arima011
#
# Q7 ####
Qtests(arima310$residuals, 24, fitdf=3)
#
Qtests(arima011$residuals, 24, fitdf=1)
# Q9 ####
adj_r2 <- function(model){
ss_res <- sum(model$residuals^2)
ss_tot <- sum(dspread[-c(1:max(p,q))]^2)
p <- model$arma[1]
q <- model$arma[2]
n <- model$nobs-max(p,q)
adj_r2 <- 1-(ss_res/(n-p-q-1))/(ss_tot/(n-1))
return(adj_r2)
}
adj_r2(arima310)
adj_r2(arima011)
adj_r2(arima310)
adj_r2(arima011)
dev.off()
plot(arima310$residuals)
axis(side=1,2001+11/12)
# Q10 ####
#.
#
breakpoint <- c(1:length(dates))[dates==1995]
ap1995 <- c(rep(0,breakpoint-1),rep(1,length(dates)-breakpoint+1))
arima(spread,c(3,1,0),xreg=ap1995,include.mean=F)
plot(dspread)
